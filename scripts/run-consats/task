#!/bin/bash -exu

export ROOT="${PWD}"
export CONSUL_RELEASE_VERSION="99999+dev.$(date +%s)"
export STEMCELL_VERSION="$(cat ${ROOT}/stemcell/version)"
export TURBULENCE_RELEASE_VERSION="$(cat ${ROOT}/turbulence-release/version)"
export LATEST_CONSUL_RELEASE_VERSION="$(cat ${ROOT}/latest-consul-release/version)"

function main() {
  setup_bosh_env_vars

  /opt/rubies/ruby-2.2.4/bin/bosh target "${BOSH_DIRECTOR}"
  export BOSH_DIRECTOR_UUID="$(/opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" status --uuid)"

  upload_stemcell
  if $WINDOWS_CLIENTS; then
    upload_windows_stemcell
  fi

  upload_releases
  generate_manifest
  force_compilation

  /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" deployment "${ROOT}/consats.yml"
  /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -n deploy
  /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" run errand acceptance-tests

  cleanup_deployment "consul"
  cleanup_deployment "turbulence-consul"

  /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -n cleanup
}

function setup_bosh_env_vars() {
  set +x
  pushd "${ROOT}/bbl-states-repo/${BBL_STATE_DIR}" > /dev/null
    export BOSH_DIRECTOR=$(bbl director-address)
    export BOSH_CA_CERT="$(bbl director-ca-cert)"
    export BOSH_CLIENT=$(bbl director-username)
    export BOSH_CLIENT_SECRET=$(bbl director-password)
  popd > /dev/null
  set -x
}

function upload_stemcell() {
  pushd "${ROOT}/stemcell" > /dev/null
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" upload stemcell stemcell.tgz --skip-if-exists
  popd > /dev/null
}

function upload_windows_stemcell() {
  pushd "${ROOT}/windows-stemcell" > /dev/null
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" upload stemcell light-bosh-stemcell-*-google-kvm-windows2012R2-go_agent.tgz --skip-if-exists
  popd > /dev/null
}

function upload_releases() {
  pushd "${ROOT}/turbulence-release" > /dev/null
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" upload release release.tgz --skip-if-exists
  popd > /dev/null

  pushd "${ROOT}/consul-release" > /dev/null
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -n create release --force --version "${CONSUL_RELEASE_VERSION}"
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" upload release
  popd > /dev/null

  pushd "${ROOT}/latest-consul-release" > /dev/null
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" upload release release.tgz --skip-if-exists
  popd > /dev/null
}

function force_compilation() {
  pushd /tmp > /dev/null
    sed -e "s/REPLACE_ME_DIRECTOR_UUID/${BOSH_DIRECTOR_UUID}/g" \
      -e "s/CONSUL_RELEASE_VERSION/${CONSUL_RELEASE_VERSION}/g" \
      -e "s/TURBULENCE_RELEASE_VERSION/${TURBULENCE_RELEASE_VERSION}/g" \
      -e "s/STEMCELL_VERSION/${STEMCELL_VERSION}/g" \
      "${ROOT}/ci/scripts/run-consats/fixtures/consul_compilation.yml" > "consul_compilation.yml"

    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -d "consul_compilation.yml" -n deploy
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -d "consul_compilation.yml" export release "consul/${CONSUL_RELEASE_VERSION}" "ubuntu-trusty/${STEMCELL_VERSION}"
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -d "consul_compilation.yml" export release "turbulence/${TURBULENCE_RELEASE_VERSION}" "ubuntu-trusty/${STEMCELL_VERSION}"
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -d "consul_compilation.yml" -n delete deployment compilation
  popd > /dev/null
}

function generate_manifest() {
  mkdir -p "${ROOT}/consul-release/aws"
  mkdir -p "${GOPATH}/src/github.com/cloudfoundry"

  pushd "${GOPATH}/src/github.com/cloudfoundry" > /dev/null
    ln -s "${ROOT}/ci" "infrastructure-ci"

    pushd "${GOPATH}/src/github.com/cloudfoundry/infrastructure-ci" > /dev/null
      GO15VENDOREXPERIMENT=1 go run \
        "./scripts/run-consats/generate_manifest.go" \
        "${ROOT}/consul-release/manifests/consats.yml" \
        > "${ROOT}/consats.yml"
    popd > /dev/null
  popd > /dev/null
}

function cleanup_deployment() {
  local deployment
  deployment="${1}-[A-Za-z0-9]\{8\}-[A-Za-z0-9]\{4\}-[A-Za-z0-9]\{4\}-[A-Za-z0-9]\{4\}-[A-Za-z0-9]\{12\}"

  for i in $(/opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" deployments | grep -o "${deployment}" | uniq); do
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -n delete deployment $i
  done

  test -z "$(/opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" deployments | grep "${deployment}")"
}

function teardown() {
  set +e
  /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -n delete deployment consats
  /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_DIRECTOR}" -n delete release consul
  set -e
}

trap teardown EXIT

main
